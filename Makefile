#--------------------------------------------------------------------
# Kojamp Man - Makefile
#
#   This is the Kojamp Man Makefile!
#
#   Here, we'll be building cool stuff about the program, so, that
#   can bu runned later...
#
#   All `Copy (c)` relevant content was already placed ad README.md
#   file
#--------------------------------------------------------------------

# our command/flag variables
CompileCommand = javac
SpecifyDirFlag = -d
RunCommand     = java
GoToDirFlag    = --class-path



# our directories/subdirectories/files variables
SourceDir       = ./src
OutputDir       = ./out
SourceFiles     = $(wildcard $(SourceDir)/*.java)
ExpectedOutputs = $(patsubst $(SourceDir)/%, $(OutputDir)/%, $(patsubst %.java, %.class, $(SourceFiles)))
FinalExeName    = Main



# our escapes/strings variables
T_BLUE_ESCAPE    = \e[1;38;5;75m
T_MAGENTA_ESCAPE = \e[1;38;5;219m
T_RED_ESCAPE     = \e[1;38;5;9m
RED_ESCAPE       = \e[1;38;5;196m
GREEN_ESCAPE     = \e[1;38;5;83m
YELLOW_ESCAPE    = \e[1;38;5;221m
RESET_ESCAPE     = \e[0m



# all script >>> will just print the help message
all:
	@printf "\n"                                                                                                  ;
	@printf "Are you trying to test $(T_MAGENTA_ESCAPE)Ko$(T_RED_ESCAPE)ja$(T_BLUE_ESCAPE)mp$(RESET_ESCAPE) ?\n\n";
	@printf "You can type:\n"                                                                                     ;
	@printf "\t$(YELLOW_ESCAPE)make build:$(RESET_ESCAPE) will build the outputs\n"                               ;
	@printf "\t$(YELLOW_ESCAPE)make run:$(RESET_ESCAPE)   will execute the outputs\n\n"                           ;



# build script >>> will generate the output exe (bytecode)
build: $(SourceFiles)
	@printf "\n";
	@if [ ! -d $(OutputDir) ]; then \
		printf "The output folder $(RED_ESCAPE)was not found...$(RESET_ESCAPE)\n"    ; \
		printf "We'll $(GREEN_ESCAPE)build one$(RESET_ESCAPE) for you! ^u^\n\n"      ; \
		mkdir $(OutputDir)                                                           ; \
	fi                                                                             ;
	@$(CompileCommand) $< $(SpecifyDirFlag) $(OutputDir)                           ;
	@printf "The program $(GREEN_ESCAPE)was built successfully!$(RESET_ESCAPE)\n\n";



# run script >>> will run the generated bytecode
run: $(ExpectedOutputs) $(OutputDir)/$(FinalExeName).class
	@printf "\n"                                                                                                       ;
	@printf "The program is $(GREEN_ESCAPE)ready to run: $(YELLOW_ESCAPE)$(OutputDir)/$(FinalExeName)$(RESET_ESCAPE)\n";
	@printf "\n"                                                                                                       ;
	@$(RunCommand) $(GoToDirFlag) $(OutputDir) $(FinalExeName)
	@printf "\n"
